<div style="margin:20px 50px">
<h1 style="font-size:60px;margin-bottom:10px;">Nominees</h1>
<hr style="border-top:1px solid black;">
<ul>
  <% @proposals.each do |proposal| %>
  <div style="height:250px;margin-top:20px">
  <% if proposal.image_url && !proposal.image_url.empty? %>
    <img src="<%=proposal.image_url%>" style="float:left;height:90%;margin-right:20px;">
  <% end %>
  <h1 class="proposalLink" id="<%= proposal.id %>"><%= link_to proposal.name, proposal_path(proposal) %><br>
  <%= proposal.description %></h1>

  <% if current_user && current_user.admin %>
    <p style="float:left;">
      <%= link_to "Delete", proposal_path(proposal), data: {:confirm => 'Are you sure?'}, method: "delete", :style => "float:right;margin-right:10px;" %>
      <%= link_to "Edit", edit_proposal_path(proposal), :style => "float:right;margin-right:10px;" %>
    </p>

  <% end %>
  </div>
  <hr>
  <% end %>
</ul>
</div>

<script type="text/javascript" charset="utf-8">
var navId = null

$(function () {
  $(".proposalLink").on("click", function(e) {
    e.preventDefault();
    navId = this.id
    proposalTemplate(navId);
    documentReadyCalls(navId);
    proposalNavigation();
    postandInsertComment();
  })
});

function documentReadyCalls(navId) {
  console.log(navId)
  // add next proposal details to DOM
  getProposal(navId);
  ProposalFormIds(navId);
  // add proposal comments to the DOM for current proposal
  getComments(navId);
  // add current user's comments to the DOM for current proposal

  // allows current user to vote on proposal if they haven't already voted
  addRanking();
  // displays ranking and comments forms for current proposal UNLESS it is the current user's proposal
  showProposalForms(navId);
}

// proposal functions

function getProposal(navId) {
  $.get("/proposals/" + navId + ".json", function(data) {
    $(".proposalName").text(data["name"]);
    $(".proposalImage").html(`<img src="${data["image_url"]}" style="width:35%;height:auto;float:left;margin: 20px 20px 20px 0;">`)
    $(".proposalDescription").text(data["description"]);
    let user = data["user"]["id"]
    $(".proposalUser").html(`<a href="/users/${data['user']['id']}">${data["user"]["name"]}</a>`);
    $(".proposalPitch").text(data["pitch"])
    // re-set the id to current on the link
    $(".js-next").attr("data-id", data["id"]);
  });
}

function proposalTemplate(navId) {
  $(".main").empty();
  $(".main").append(`<div class="proposalImage"></div>`);
  $(".main").append(`<h1 class="proposalName"></h1>`);
  $(".main").append(`<h3 class="proposalDescription"></h3>`);
  $(".main").append(`<hr>`);
  $(".main").append(`<p>Submitted by: <span class="proposalUser"></span></p>`);
  $(".main").append(`<h1>Why This Proposal Should Be Accepted</h1>`)
  $(".main").append(`<p class="proposalPitch"></p>`);
  $(".main").append(`<button class="js-next" data-id="${navId}">Next Proposal</button>`);
  $(".main").append(`<button class="js-previous" data-id="${navId}">Previous Proposal</button>`);
  // add ranking and comment forms
  $(".main").append('<%= j render 'logged_in_show' %>');
  $(".main").append(`<h1>Recent Comments:</h1>`);
  $(".main").append(`<div id="recentComments"></div>`);
}

function proposalNavigation(){
  $(".js-next").on("click", function() {
    // set id for next proposal
    navId = (parseInt($(".js-next").attr("data-id")) + 1).toString();
    documentReadyCalls(navId);
  });
  $(".js-previous").on("click", function() {
    // set id for previous proposal
    navId = (parseInt($(".js-next").attr("data-id")) - 1).toString();
    documentReadyCalls(navId);
  });
}

function ProposalFormIds(navId) {
  if($("#comment_proposal")[0] && $("#ranking_proposal")[0]) {
    $("#comment_proposal")[0]["value"] = navId;
    $("#ranking_proposal")[0]["value"] = navId;
  };
}

function showProposalForms(navId) {
  $.get("/proposals/" + navId + ".json", function(data) {
      let currentUser = $("#badIdea")[0]["value"]
      if (data["user"]["id"].toString() != currentUser) {
        $("#proposalForms").show();
      } else {
        $("#proposalForms").hide();
      }
  });
}

// comment functions

function getComments(navId) {
  $.get(`/proposals/${navId}/comments.json`, function(data) {
    $("#recentComments").empty()
    data.forEach(function(comment) {
      commentTemplate(comment)
    });
  });
}

function postandInsertComment() {
  $('#new_comment').on("submit", async function(e) {
    e.preventDefault();
    var values = $(this).serialize();
    let posting = await $.post('/comments', values);
    let comments = await $.get(`/proposals/${navId}/comments.json`, function(data) {
    });
    let newComment = comments.pop();
    newCommentTemplate(newComment);
    $("input[type='submit']").removeAttr('disabled');
  });
}

function commentTemplate(comment) {
  $("#recentComments").append(`<div id="comment-${comment["id"]}">`)
  $(`#comment-${comment["id"]}`).append(`<h4><a href="/users/${comment['user']['id']}">${comment["user"]["name"]}</a> - ${comment["created_at"]} </h4>`);
  $(`#comment-${comment["id"]}`).append(`<h4>${comment["content"]}</h4>`);
  $(`#comment-${comment["id"]}`).append(`<p id="reply_to_comment_${comment['id']}"><a href="#" onclick="replyForm(${comment['id']});return false;"}/replies/new">Reply</a></p>`);
  $(`#comment-${comment["id"]}`).append(`</div>`)
  $(`#comment-${comment["id"]}`).append(`<div id="replies_to_comment_${comment['id']}"></div>`)
  repliesTemplate(comment)
}

function newCommentTemplate(newComment) {
  $("#recentComments").prepend(`</div>`)
  $("#recentComments").prepend(`<p><a href="/proposals/${navId}/comments/${newComment.id}/replies/new">Reply</a></p>`)
  $("#recentComments").prepend(`<h4>${newComment.content}</h4>`)
  $("#recentComments").prepend(`<h4><a href="/users/${newComment.user.id}">${newComment.user.name}</a> - ${newComment.created_at} </h4>`);
  $("#recentComments").prepend(`<div id="comment-${newComment["id"]}">`)
}

//reply functions

function repliesTemplate(comment) {
  $(`#reply_to_comment_${comment["id"]}`).append(`<a href="#" onclick="clearReplies()">Clear Replies`)
  comment.replies.forEach(function(reply) {
    $(`#replies_to_comment_${comment["id"]}`).append('<hr>')

    $(`#replies_to_comment_${comment["id"]}`).append(`<h4 style="position:relative;left:50px;"><a href="/users/${reply['user']['id']}">${reply["user"]["name"]}</a> - ${reply["created_at"]} </h4>`);
    $(`#replies_to_comment_${comment["id"]}`).append(`<h4 style="position:relative;left:50px;">${reply["content"]}</h4>`);
  });
  $(`#replies_to_comment_${comment["id"]}`).append('<hr>')
}

function newReplyTemplate(newReply, comment) {
  $(`#replies_to_comment_${comment}`).append('<hr>')
  $(`#replies_to_comment_${comment}`).append(`<h4 style="position:relative;left:50px;"><a href="/users/${newReply['user']['id']}">${newReply["user"]["name"]}</a> - ${newReply["created_at"]} </h4>`);
  $(`#replies_to_comment_${comment}`).append(`<h4 style="position:relative;left:50px;">${newReply["content"]}</h4>`);
}

function replyForm(comment) {
  $(`#reply_to_comment_${comment}`).append(`<%= j render partial: "/replies/form" %>`);
  setReplyFormIds(comment)
  postandInsertReply(comment);
}

function setReplyFormIds(comment) {
  $("#reply_proposal")[0]["value"] = navId;
  $("#reply_comment")[0]["value"] = `${comment}`;
}

function postandInsertReply(comment) {
  $('#new_reply').on("submit", async function(e) {
    e.preventDefault();
  var values = $(this).serialize();
  let posting = await $.post('/replies', values);
  let replies = await $.get(`/proposals/${navId}/comments/${comment}.json`)
  let newReply = replies["replies"].pop();
  $('#new_reply').remove();
  newReplyTemplate(newReply, comment);
  });
}

//ranking functions

async function checkForUserRanking() {
  let currentUser = $("#badIdea")[0]["value"]
  let currentProposal = $("#ranking_proposal")[0]["value"]
  let res = await fetch('/rankings.json')
  let foundData = await res.json()
  let ranking = foundData.find(function(ranking) {
     return ranking["user"]["id"].toString() === currentUser && ranking["proposal"]["id"].toString() === currentProposal
   })

   if (ranking) {
     return ranking.user
   } else {
     return "not found"
   }
}

function addRanking() {
  $('#new_ranking').on("submit", function() {
    checkForUserRanking().then(res => {
      if (res === "not found") {
        var values = $(this).serialize();
        var posting = $.post('/rankings', values);
      }
      else {
        alert("You've already voted on this proposal");
      }
    });
  });
}

</script>
